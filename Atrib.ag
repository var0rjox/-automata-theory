{
type Lista = [String]
type String1 = String
type String2 = String
type String3 = String

fVerificar a t@(x:xs) | a `elem` t = True 
          | otherwise = False 

recorrido t@(x:xs) (y:ys) = fVerificar y t && recorrido t ys 
recorrido [] (y:ys) = False 
recorrido t@(x:xs) [] = True 


fencontrar y t@(x:xs) | y `elem` t = [] 
          | otherwise = y:[] 

captura t@(x:xs) (y:ys) = fencontrar y t ++ captura t ys 
captura [] (y:ys) = []
captura t@(x:xs) [] = [] 

}

DATA Prog | Prog Metodos Main

DATA Metodos | Metds Metodo Metodos
       | VacioMet

DATA Metodo | Metd Instancia Instancia1 Instancia2 CuerpoMet

DATA Instancia | Instancia Tipo String

DATA Instancia1 | Instancia1 Tipo String

DATA Instancia2 | Instancia2 Tipo String

DATA Instancias | Instancias Instancia Instancias
    | VacioInst

DATA CuerpoMet | CuerpoM Expresion
         | CuerpoMCondicional Expresion Funciones Expresion1

DATA Funcion | Funcion1 String Mostrar
        | Funcion2 String
        | Funcion3 Instancia String String1 String2

DATA Mostrar | Mostrar String
       | MostrarVacio

DATA Funciones | Funciones Funcion Funciones
         | VacioFuncs

DATA Main | Main Instancias Funciones Int

DATA Tipo | T1
    | T2

DATA Expresion | Expresion Relacion A

DATA Expresion1 | Expresion1 Relacion A

DATA A | A OpLog Expresion
       | AVacio

DATA Relacion | Relacion Terminos B

DATA B | B SimpOps Relacion
  | BVacio

DATA C | C SimpOps Terminos
  | CVacio

DATA Terminos | Terminos Fr C

DATA Fr | Fr Expresion
  | Fr1 String
  | Fr2 Int

DATA OpLog | Opmenor
     | Opmayor
     | Opmayorigual
     | Opmenorigual
     | Opdistinto

DATA SimpOps | Smas
       | Smenos
       | Smul
       | Sdiv




