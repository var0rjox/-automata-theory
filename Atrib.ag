{
type Lista = [String]
type Instancia1 = Instancia
type Instancia2 = Instancia
type String1 = String
type String2 = String
type String3 = String
}

DATA Prog | Prog Metodos Main

DATA Metodos | Metds Metodo Metodos
             | VacioMet

DATA Metodo | Metd Instancia Instancia1 Instancia2 CuerpoMet

DATA Instancia | Instancia Tipo String

DATA Instancias | Instancias Instancia Instancia1
                | VacioInst

DATA CuerpoMet | CuerpoM Expresion
               | CuerpoMCondicional Expresion Funciones Expresion

DATA Funcion | Funcion1 String Mostrar
              | Funcion2 String
              | Funcion3 Instancia String String1 String2

DATA Mostrar | Mostrar String
             | MostrarVacio

DATA Funciones | Funciones Funcion Funciones
               | VacioFuncs

DATA Main | Main Instancias Funciones Int

DATA Tipo | T1
          | T2

DATA Expresion | Expresion Relacion A

DATA A | A Oplog Expresion
       | AVacio

DATA Relacion | Relacion Terminos B

DATA B | B SimpOps Relacion
        | BVacio

DATA C | C SimpOps Terminos
        | CVacio

DATA Terminos | Terminos Fr C

DATA Fr | Fr Expresion
        | Fr1 String
        | Fr2 Int

DATA OpLog | Opmenor
           | Opmayor
           | Opmayorigual
           | Opmenorigual
           | Opdistinto
           | Opigual

DATA SimpOps | Smas
             | Smenos
             | Smul
             | Sdiv


ATTR Prog  [  |  | d:Lista u:Lista ]
ATTR Metodos [  |  | d:Lista ]
ATTR Metodo [  |  | d:Lista ]
ATTR Instancia [  |  | d:Lista ]
ATTR Instancias [  |  | d:Lista ]
ATTR CuerpoMet [  |  | d:Lista ]
ATTR Funcion [  |  | d:Lista ]
ATTR Mostrar [  |  | d:Lista ]
ATTR Funciones [  |  | d:Lista ]
ATTR Main [  |  | d:Lista ]
ATTR Tipo [  |  | d:Lista ]
ATTR Expresion [  |  | d:Lista ]
ATTR A [  |  | d:Lista ]
ATTR B [  |  | d:Lista ]
ATTR C [  |  | d:Lista ]
ATTR Relacion [  |  | d:Lista ]
ATTR Terminos [  |  | d:Lista ]
ATTR Fr [  |  | d:Lista ]
ATTR OpLog [  |  | d:Lista ]
ATTR SimpOps [  |  | d:Lista ]

SEM Prog 
| Prog  lhs.r = captura @decls.d @intrs.u
      lhs.d = @decls.d 
      lhs.u = @intrs.u
      lhs.cod = "import java.util.Scanner;" ++ "\n\n" ++  "public class " ++ @string ++ " { " ++ "\n" ++ "   public static void main(String[] args) { " ++
                "\n" ++ "   Scanner teclado = new Scanner(System.in); " ++ "\n" ++ @decls.cod ++ @intrs.cod ++ "\n" ++ "}" ++ "\n" ++ "}"
      

SEM Decls 
| De lhs.d = @decl.d ++ @decls.d
     lhs.cod = @decl.cod ++ ";" ++"\n" ++ @decls.cod

| Vacio lhs.d = [] 
        lhs.cod = ""

SEM Decl 
| Dec lhs.d = @string:[] 
      lhs.cod = @tipo.cod ++ " " ++ @string

SEM Intrs 
| Is1 lhs.u = @inst.u ++ @intrs.u  
      lhs.cod = @inst.cod ++ ";"++"\n" ++ @intrs.cod
| Is2 lhs.u = []
      lhs.cod = ""
          
SEM Inst 
| I1 lhs.u = @string:[]   
     lhs.cod = "   System.out.println(\"Ingrese valor " ++ @string ++ " :\");" ++"\n" ++ "   " ++ @string ++ " = teclado.nextInt()"

| I2 lhs.u =  @string:[] 
     lhs.cod = "   System.out.println(\"valor de " ++ @string ++ " :\"" ++ " + " ++ @string ++ ")"

SEM Tipo 
| T1 lhs.cod = "   int"
| T2 lhs.cod = "   float"
         