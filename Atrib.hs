-- do not edit; automatically generated by UU_AG
module Atrib where

type Lista = [String]
type String1 = String
type String2 = String
type String3 = String

fVerificar a t@(x:xs) | a `elem` t = True 
          | otherwise = False 

recorrido t@(x:xs) (y:ys) = fVerificar y t && recorrido t ys 
recorrido [] (y:ys) = False 
recorrido t@(x:xs) [] = True 


fencontrar y t@(x:xs) | y `elem` t = [] 
          | otherwise = y:[] 

captura t@(x:xs) (y:ys) = fencontrar y t ++ captura t ys 
captura [] (y:ys) = []
captura t@(x:xs) [] = [] 

-- A -----------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for A.A:

-}
{-
   local variables for A.AVacio:

-}
data A = A_A (OpLog) (Expresion)
       | A_AVacio 
-- semantic domain
type T_A = ()
-- cata
sem_A :: (A) ->
         (T_A)
sem_A ((A_A (_opLog) (_expresion))) =
    (sem_A_A ((sem_OpLog (_opLog))) ((sem_Expresion (_expresion))))
sem_A ((A_AVacio )) =
    (sem_A_AVacio )
sem_A_A :: (T_OpLog) ->
           (T_Expresion) ->
           (T_A)
sem_A_A (_opLog) (_expresion) =
    let 
    in  ()
sem_A_AVacio :: (T_A)
sem_A_AVacio  =
    let 
    in  ()
-- B -----------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for B.B:

-}
{-
   local variables for B.BVacio:

-}
data B = B_B (SimpOps) (Relacion)
       | B_BVacio 
-- semantic domain
type T_B = ()
-- cata
sem_B :: (B) ->
         (T_B)
sem_B ((B_B (_simpOps) (_relacion))) =
    (sem_B_B ((sem_SimpOps (_simpOps))) ((sem_Relacion (_relacion))))
sem_B ((B_BVacio )) =
    (sem_B_BVacio )
sem_B_B :: (T_SimpOps) ->
           (T_Relacion) ->
           (T_B)
sem_B_B (_simpOps) (_relacion) =
    let 
    in  ()
sem_B_BVacio :: (T_B)
sem_B_BVacio  =
    let 
    in  ()
-- C -----------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for C.C:

-}
{-
   local variables for C.CVacio:

-}
data C = C_C (SimpOps) (Terminos)
       | C_CVacio 
-- semantic domain
type T_C = ()
-- cata
sem_C :: (C) ->
         (T_C)
sem_C ((C_C (_simpOps) (_terminos))) =
    (sem_C_C ((sem_SimpOps (_simpOps))) ((sem_Terminos (_terminos))))
sem_C ((C_CVacio )) =
    (sem_C_CVacio )
sem_C_C :: (T_SimpOps) ->
           (T_Terminos) ->
           (T_C)
sem_C_C (_simpOps) (_terminos) =
    let 
    in  ()
sem_C_CVacio :: (T_C)
sem_C_CVacio  =
    let 
    in  ()
-- CuerpoMet ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for CuerpoMet.CuerpoM:

-}
{-
   local variables for CuerpoMet.CuerpoMCondicional:

-}
data CuerpoMet = CuerpoMet_CuerpoM (Expresion)
               | CuerpoMet_CuerpoMCondicional (Expresion) (Funciones) (Expresion1)
-- semantic domain
type T_CuerpoMet = ()
-- cata
sem_CuerpoMet :: (CuerpoMet) ->
                 (T_CuerpoMet)
sem_CuerpoMet ((CuerpoMet_CuerpoM (_expresion))) =
    (sem_CuerpoMet_CuerpoM ((sem_Expresion (_expresion))))
sem_CuerpoMet ((CuerpoMet_CuerpoMCondicional (_expresion) (_funciones) (_expresion1))) =
    (sem_CuerpoMet_CuerpoMCondicional ((sem_Expresion (_expresion))) ((sem_Funciones (_funciones))) ((sem_Expresion1 (_expresion1))))
sem_CuerpoMet_CuerpoM :: (T_Expresion) ->
                         (T_CuerpoMet)
sem_CuerpoMet_CuerpoM (_expresion) =
    let 
    in  ()
sem_CuerpoMet_CuerpoMCondicional :: (T_Expresion) ->
                                    (T_Funciones) ->
                                    (T_Expresion1) ->
                                    (T_CuerpoMet)
sem_CuerpoMet_CuerpoMCondicional (_expresion) (_funciones) (_expresion1) =
    let 
    in  ()
-- Expresion ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Expresion.Expresion:

-}
data Expresion = Expresion_Expresion (Relacion) (A)
-- semantic domain
type T_Expresion = ()
-- cata
sem_Expresion :: (Expresion) ->
                 (T_Expresion)
sem_Expresion ((Expresion_Expresion (_relacion) (_a))) =
    (sem_Expresion_Expresion ((sem_Relacion (_relacion))) ((sem_A (_a))))
sem_Expresion_Expresion :: (T_Relacion) ->
                           (T_A) ->
                           (T_Expresion)
sem_Expresion_Expresion (_relacion) (_a) =
    let 
    in  ()
-- Expresion1 --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Expresion1.Expresion1:

-}
data Expresion1 = Expresion1_Expresion1 (Relacion) (A)
-- semantic domain
type T_Expresion1 = ()
-- cata
sem_Expresion1 :: (Expresion1) ->
                  (T_Expresion1)
sem_Expresion1 ((Expresion1_Expresion1 (_relacion) (_a))) =
    (sem_Expresion1_Expresion1 ((sem_Relacion (_relacion))) ((sem_A (_a))))
sem_Expresion1_Expresion1 :: (T_Relacion) ->
                             (T_A) ->
                             (T_Expresion1)
sem_Expresion1_Expresion1 (_relacion) (_a) =
    let 
    in  ()
-- Fr ----------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Fr.Fr:

-}
{-
   local variables for Fr.Fr1:

-}
{-
   local variables for Fr.Fr2:

-}
data Fr = Fr_Fr (Expresion)
        | Fr_Fr1 (String)
        | Fr_Fr2 (Int)
-- semantic domain
type T_Fr = ()
-- cata
sem_Fr :: (Fr) ->
          (T_Fr)
sem_Fr ((Fr_Fr (_expresion))) =
    (sem_Fr_Fr ((sem_Expresion (_expresion))))
sem_Fr ((Fr_Fr1 (_string))) =
    (sem_Fr_Fr1 (_string))
sem_Fr ((Fr_Fr2 (_int))) =
    (sem_Fr_Fr2 (_int))
sem_Fr_Fr :: (T_Expresion) ->
             (T_Fr)
sem_Fr_Fr (_expresion) =
    let 
    in  ()
sem_Fr_Fr1 :: (String) ->
              (T_Fr)
sem_Fr_Fr1 (_string) =
    let 
    in  ()
sem_Fr_Fr2 :: (Int) ->
              (T_Fr)
sem_Fr_Fr2 (_int) =
    let 
    in  ()
-- Funcion -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Funcion.Funcion1:

-}
{-
   local variables for Funcion.Funcion2:

-}
{-
   local variables for Funcion.Funcion3:

-}
data Funcion = Funcion_Funcion1 (String) (Mostrar)
             | Funcion_Funcion2 (String)
             | Funcion_Funcion3 (Instancia) (String) (String1) (String2)
-- semantic domain
type T_Funcion = ()
-- cata
sem_Funcion :: (Funcion) ->
               (T_Funcion)
sem_Funcion ((Funcion_Funcion1 (_string) (_mostrar))) =
    (sem_Funcion_Funcion1 (_string) ((sem_Mostrar (_mostrar))))
sem_Funcion ((Funcion_Funcion2 (_string))) =
    (sem_Funcion_Funcion2 (_string))
sem_Funcion ((Funcion_Funcion3 (_instancia) (_string) (_string1) (_string2))) =
    (sem_Funcion_Funcion3 ((sem_Instancia (_instancia))) (_string) (_string1) (_string2))
sem_Funcion_Funcion1 :: (String) ->
                        (T_Mostrar) ->
                        (T_Funcion)
sem_Funcion_Funcion1 (_string) (_mostrar) =
    let 
    in  ()
sem_Funcion_Funcion2 :: (String) ->
                        (T_Funcion)
sem_Funcion_Funcion2 (_string) =
    let 
    in  ()
sem_Funcion_Funcion3 :: (T_Instancia) ->
                        (String) ->
                        (String1) ->
                        (String2) ->
                        (T_Funcion)
sem_Funcion_Funcion3 (_instancia) (_string) (_string1) (_string2) =
    let 
    in  ()
-- Funciones ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Funciones.Funciones:

-}
{-
   local variables for Funciones.VacioFuncs:

-}
data Funciones = Funciones_Funciones (Funcion) (Funciones)
               | Funciones_VacioFuncs 
-- semantic domain
type T_Funciones = ()
-- cata
sem_Funciones :: (Funciones) ->
                 (T_Funciones)
sem_Funciones ((Funciones_Funciones (_funcion) (_funciones))) =
    (sem_Funciones_Funciones ((sem_Funcion (_funcion))) ((sem_Funciones (_funciones))))
sem_Funciones ((Funciones_VacioFuncs )) =
    (sem_Funciones_VacioFuncs )
sem_Funciones_Funciones :: (T_Funcion) ->
                           (T_Funciones) ->
                           (T_Funciones)
sem_Funciones_Funciones (_funcion) (_funciones) =
    let 
    in  ()
sem_Funciones_VacioFuncs :: (T_Funciones)
sem_Funciones_VacioFuncs  =
    let 
    in  ()
-- Instancia ---------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Instancia.Instancia:

-}
data Instancia = Instancia_Instancia (Tipo) (String)
-- semantic domain
type T_Instancia = ()
-- cata
sem_Instancia :: (Instancia) ->
                 (T_Instancia)
sem_Instancia ((Instancia_Instancia (_tipo) (_string))) =
    (sem_Instancia_Instancia ((sem_Tipo (_tipo))) (_string))
sem_Instancia_Instancia :: (T_Tipo) ->
                           (String) ->
                           (T_Instancia)
sem_Instancia_Instancia (_tipo) (_string) =
    let 
    in  ()
-- Instancia1 --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Instancia1.Instancia1:

-}
data Instancia1 = Instancia1_Instancia1 (Tipo) (String)
-- semantic domain
type T_Instancia1 = ()
-- cata
sem_Instancia1 :: (Instancia1) ->
                  (T_Instancia1)
sem_Instancia1 ((Instancia1_Instancia1 (_tipo) (_string))) =
    (sem_Instancia1_Instancia1 ((sem_Tipo (_tipo))) (_string))
sem_Instancia1_Instancia1 :: (T_Tipo) ->
                             (String) ->
                             (T_Instancia1)
sem_Instancia1_Instancia1 (_tipo) (_string) =
    let 
    in  ()
-- Instancia2 --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Instancia2.Instancia2:

-}
data Instancia2 = Instancia2_Instancia2 (Tipo) (String)
-- semantic domain
type T_Instancia2 = ()
-- cata
sem_Instancia2 :: (Instancia2) ->
                  (T_Instancia2)
sem_Instancia2 ((Instancia2_Instancia2 (_tipo) (_string))) =
    (sem_Instancia2_Instancia2 ((sem_Tipo (_tipo))) (_string))
sem_Instancia2_Instancia2 :: (T_Tipo) ->
                             (String) ->
                             (T_Instancia2)
sem_Instancia2_Instancia2 (_tipo) (_string) =
    let 
    in  ()
-- Instancias --------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Instancias.Instancias:

-}
{-
   local variables for Instancias.VacioInst:

-}
data Instancias = Instancias_Instancias (Instancia) (Instancias)
                | Instancias_VacioInst 
-- semantic domain
type T_Instancias = ()
-- cata
sem_Instancias :: (Instancias) ->
                  (T_Instancias)
sem_Instancias ((Instancias_Instancias (_instancia) (_instancias))) =
    (sem_Instancias_Instancias ((sem_Instancia (_instancia))) ((sem_Instancias (_instancias))))
sem_Instancias ((Instancias_VacioInst )) =
    (sem_Instancias_VacioInst )
sem_Instancias_Instancias :: (T_Instancia) ->
                             (T_Instancias) ->
                             (T_Instancias)
sem_Instancias_Instancias (_instancia) (_instancias) =
    let 
    in  ()
sem_Instancias_VacioInst :: (T_Instancias)
sem_Instancias_VacioInst  =
    let 
    in  ()
-- Main --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Main.Main:

-}
data Main = Main_Main (Instancias) (Funciones) (Int)
-- semantic domain
type T_Main = ()
-- cata
sem_Main :: (Main) ->
            (T_Main)
sem_Main ((Main_Main (_instancias) (_funciones) (_int))) =
    (sem_Main_Main ((sem_Instancias (_instancias))) ((sem_Funciones (_funciones))) (_int))
sem_Main_Main :: (T_Instancias) ->
                 (T_Funciones) ->
                 (Int) ->
                 (T_Main)
sem_Main_Main (_instancias) (_funciones) (_int) =
    let 
    in  ()
-- Metodo ------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Metodo.Metd:

-}
data Metodo = Metodo_Metd (Instancia) (Instancia1) (Instancia2) (CuerpoMet)
-- semantic domain
type T_Metodo = ()
-- cata
sem_Metodo :: (Metodo) ->
              (T_Metodo)
sem_Metodo ((Metodo_Metd (_instancia) (_instancia1) (_instancia2) (_cuerpoMet))) =
    (sem_Metodo_Metd ((sem_Instancia (_instancia))) ((sem_Instancia1 (_instancia1))) ((sem_Instancia2 (_instancia2))) ((sem_CuerpoMet (_cuerpoMet))))
sem_Metodo_Metd :: (T_Instancia) ->
                   (T_Instancia1) ->
                   (T_Instancia2) ->
                   (T_CuerpoMet) ->
                   (T_Metodo)
sem_Metodo_Metd (_instancia) (_instancia1) (_instancia2) (_cuerpoMet) =
    let 
    in  ()
-- Metodos -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Metodos.Metds:

-}
{-
   local variables for Metodos.VacioMet:

-}
data Metodos = Metodos_Metds (Metodo) (Metodos)
             | Metodos_VacioMet 
-- semantic domain
type T_Metodos = ()
-- cata
sem_Metodos :: (Metodos) ->
               (T_Metodos)
sem_Metodos ((Metodos_Metds (_metodo) (_metodos))) =
    (sem_Metodos_Metds ((sem_Metodo (_metodo))) ((sem_Metodos (_metodos))))
sem_Metodos ((Metodos_VacioMet )) =
    (sem_Metodos_VacioMet )
sem_Metodos_Metds :: (T_Metodo) ->
                     (T_Metodos) ->
                     (T_Metodos)
sem_Metodos_Metds (_metodo) (_metodos) =
    let 
    in  ()
sem_Metodos_VacioMet :: (T_Metodos)
sem_Metodos_VacioMet  =
    let 
    in  ()
-- Mostrar -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Mostrar.Mostrar:

-}
{-
   local variables for Mostrar.MostrarVacio:

-}
data Mostrar = Mostrar_Mostrar (String)
             | Mostrar_MostrarVacio 
-- semantic domain
type T_Mostrar = ()
-- cata
sem_Mostrar :: (Mostrar) ->
               (T_Mostrar)
sem_Mostrar ((Mostrar_Mostrar (_string))) =
    (sem_Mostrar_Mostrar (_string))
sem_Mostrar ((Mostrar_MostrarVacio )) =
    (sem_Mostrar_MostrarVacio )
sem_Mostrar_Mostrar :: (String) ->
                       (T_Mostrar)
sem_Mostrar_Mostrar (_string) =
    let 
    in  ()
sem_Mostrar_MostrarVacio :: (T_Mostrar)
sem_Mostrar_MostrarVacio  =
    let 
    in  ()
-- OpLog -------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for OpLog.Opdistinto:

-}
{-
   local variables for OpLog.Opmayor:

-}
{-
   local variables for OpLog.Opmayorigual:

-}
{-
   local variables for OpLog.Opmenor:

-}
{-
   local variables for OpLog.Opmenorigual:

-}
data OpLog = OpLog_Opdistinto 
           | OpLog_Opmayor 
           | OpLog_Opmayorigual 
           | OpLog_Opmenor 
           | OpLog_Opmenorigual 
-- semantic domain
type T_OpLog = ()
-- cata
sem_OpLog :: (OpLog) ->
             (T_OpLog)
sem_OpLog ((OpLog_Opdistinto )) =
    (sem_OpLog_Opdistinto )
sem_OpLog ((OpLog_Opmayor )) =
    (sem_OpLog_Opmayor )
sem_OpLog ((OpLog_Opmayorigual )) =
    (sem_OpLog_Opmayorigual )
sem_OpLog ((OpLog_Opmenor )) =
    (sem_OpLog_Opmenor )
sem_OpLog ((OpLog_Opmenorigual )) =
    (sem_OpLog_Opmenorigual )
sem_OpLog_Opdistinto :: (T_OpLog)
sem_OpLog_Opdistinto  =
    let 
    in  ()
sem_OpLog_Opmayor :: (T_OpLog)
sem_OpLog_Opmayor  =
    let 
    in  ()
sem_OpLog_Opmayorigual :: (T_OpLog)
sem_OpLog_Opmayorigual  =
    let 
    in  ()
sem_OpLog_Opmenor :: (T_OpLog)
sem_OpLog_Opmenor  =
    let 
    in  ()
sem_OpLog_Opmenorigual :: (T_OpLog)
sem_OpLog_Opmenorigual  =
    let 
    in  ()
-- Prog --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Prog.Prog:

-}
data Prog = Prog_Prog (Metodos) (Main)
-- semantic domain
type T_Prog = ()
-- cata
sem_Prog :: (Prog) ->
            (T_Prog)
sem_Prog ((Prog_Prog (_metodos) (_main))) =
    (sem_Prog_Prog ((sem_Metodos (_metodos))) ((sem_Main (_main))))
sem_Prog_Prog :: (T_Metodos) ->
                 (T_Main) ->
                 (T_Prog)
sem_Prog_Prog (_metodos) (_main) =
    let 
    in  ()
-- Relacion ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Relacion.Relacion:

-}
data Relacion = Relacion_Relacion (Terminos) (B)
-- semantic domain
type T_Relacion = ()
-- cata
sem_Relacion :: (Relacion) ->
                (T_Relacion)
sem_Relacion ((Relacion_Relacion (_terminos) (_b))) =
    (sem_Relacion_Relacion ((sem_Terminos (_terminos))) ((sem_B (_b))))
sem_Relacion_Relacion :: (T_Terminos) ->
                         (T_B) ->
                         (T_Relacion)
sem_Relacion_Relacion (_terminos) (_b) =
    let 
    in  ()
-- SimpOps -----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for SimpOps.Sdiv:

-}
{-
   local variables for SimpOps.Smas:

-}
{-
   local variables for SimpOps.Smenos:

-}
{-
   local variables for SimpOps.Smul:

-}
data SimpOps = SimpOps_Sdiv 
             | SimpOps_Smas 
             | SimpOps_Smenos 
             | SimpOps_Smul 
-- semantic domain
type T_SimpOps = ()
-- cata
sem_SimpOps :: (SimpOps) ->
               (T_SimpOps)
sem_SimpOps ((SimpOps_Sdiv )) =
    (sem_SimpOps_Sdiv )
sem_SimpOps ((SimpOps_Smas )) =
    (sem_SimpOps_Smas )
sem_SimpOps ((SimpOps_Smenos )) =
    (sem_SimpOps_Smenos )
sem_SimpOps ((SimpOps_Smul )) =
    (sem_SimpOps_Smul )
sem_SimpOps_Sdiv :: (T_SimpOps)
sem_SimpOps_Sdiv  =
    let 
    in  ()
sem_SimpOps_Smas :: (T_SimpOps)
sem_SimpOps_Smas  =
    let 
    in  ()
sem_SimpOps_Smenos :: (T_SimpOps)
sem_SimpOps_Smenos  =
    let 
    in  ()
sem_SimpOps_Smul :: (T_SimpOps)
sem_SimpOps_Smul  =
    let 
    in  ()
-- Terminos ----------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Terminos.Terminos:

-}
data Terminos = Terminos_Terminos (Fr) (C)
-- semantic domain
type T_Terminos = ()
-- cata
sem_Terminos :: (Terminos) ->
                (T_Terminos)
sem_Terminos ((Terminos_Terminos (_fr) (_c))) =
    (sem_Terminos_Terminos ((sem_Fr (_fr))) ((sem_C (_c))))
sem_Terminos_Terminos :: (T_Fr) ->
                         (T_C) ->
                         (T_Terminos)
sem_Terminos_Terminos (_fr) (_c) =
    let 
    in  ()
-- Tipo --------------------------------------------------------
{-
   inherited attributes:

   chained attributes:

   synthesised attributes:

-}
{-
   local variables for Tipo.T1:

-}
{-
   local variables for Tipo.T2:

-}
data Tipo = Tipo_T1 
          | Tipo_T2 
-- semantic domain
type T_Tipo = ()
-- cata
sem_Tipo :: (Tipo) ->
            (T_Tipo)
sem_Tipo ((Tipo_T1 )) =
    (sem_Tipo_T1 )
sem_Tipo ((Tipo_T2 )) =
    (sem_Tipo_T2 )
sem_Tipo_T1 :: (T_Tipo)
sem_Tipo_T1  =
    let 
    in  ()
sem_Tipo_T2 :: (T_Tipo)
sem_Tipo_T2  =
    let 
    in  ()

